{
  "name": "batcher",
  "version": "0.0.2",
  "description": "A stream that batches data sent to it",
  "author": {
    "name": "Nebojsa Sabovic",
    "email": "nsabovic@gmail.com"
  },
  "keywords": [
    "batch",
    "stream"
  ],
  "engines": {
    "node": ">=0.6.0",
    "npm": ">=1.1.9"
  },
  "main": "lib/batcher.js",
  "scripts": {
    "test": "rm -rf lib-cov && jshint lib/*.js test/*.js && mocha -R spec",
    "coverage": "rm -rf lib-cov && jscoverage lib lib-cov && mocha -R html-cov > cov.html"
  },
  "devDependencies": {
    "mocha": "~1.0",
    "sinon": "~1.3",
    "jshint": ">= 0.7.0"
  },
  "dependencies": {
    "twoqueue": ">0.0.1"
  },
  "readme": "# Batcher\n\nBatching your streams since 2012.\n\n## Usage\n\nYour logging service takes a stream of JSON objects. You don't want to stream\nobjects as they come, but rather batch them and send them every minute, or when\na hundred comes by or some such thing.\n\n    var Batcher = require('batcher');\n\n    var b = new Batcher({\n      batchSize: 100,\n      batchTimeMs: 60000,\n      encoder: function(items) {\n        return items.map(JSON.stringify).join('');\n      }\n    });\n\n    b.pipe(net.createConnection(host: 'loggingservice.com', port: 1337));\n\nMore frequently, you don't need to pipe it but just accumulate:\n\n    b.on('data', function(payload) {\n      upload('/somewhere', payload);\n    });\n\nYou can also manually flush the batch:\n\n    b.write('one');\n    b.flush(function() {\n      console.log('one has been sent');\n    });\n\nBatchers support `write()`, `pause()`, `resume()`, `flush()`, `end()` and\n`destroy()`.\n\n`pause()/resume()` is useful when you need to send with retries, but want to\navoid the thundering herd when the server comes back online.\n\n    var b = new Batcher({\n      batchSize: 1,\n      maxBatchSize: 100,\n      encoder: function(items) {\n        b.pause();\n\n        function send() {\n          request({\n            url: some_url,\n            json: items,\n          }, function(err) {\n            if (err) return setTimeout(send, 1000);\n            b.resume();\n          });\n        }\n\n        send();\n      }\n    });\n\n`batchSize` of 1 means send them as they come. `maxBatchSize` of 100 means if\nthere are more available, send as many as 100. `setTimeout` is used to retry\nsending every second.\n",
  "readmeFilename": "readme.md",
  "_id": "batcher@0.0.2",
  "_from": "batcher@0.0.2"
}
